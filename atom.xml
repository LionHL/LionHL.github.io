<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LionHL</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-12T06:32:49.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LionHL</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DOM元素捕获和冒泡都绑定了，触发几次？执行顺序如何？</title>
    <link href="http://yoursite.com/2017/07/12/170712/"/>
    <id>http://yoursite.com/2017/07/12/170712/</id>
    <published>2017-07-12T03:28:27.000Z</published>
    <updated>2017-07-12T06:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看见一个题目，一个元素如果捕获和冒泡都绑定了，事件会触发几次，执行顺序如何？<br>没有想到答案，感觉知识匮乏，技术太差怎么办呢？直接弄个demo看下，做个笔记记录下，免得下次又忘了。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;one&quot;&gt;</div><div class="line">  &lt;div id=&quot;two&quot;&gt;</div><div class="line">    &lt;div id=&quot;three&quot;&gt;</div><div class="line">      &lt;div id=&quot;four&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">  var one = document.getElementById(&apos;one&apos;);</div><div class="line">  var two = document.getElementById(&apos;two&apos;);</div><div class="line">  var three = document.getElementById(&apos;three&apos;);</div><div class="line">  var four = document.getElementById(&apos;four&apos;);</div><div class="line"></div><div class="line">  one.addEventListener(&apos;click&apos;, function () &#123;</div><div class="line">    console.log(&apos;one&apos;);</div><div class="line">  &#125;, false);</div><div class="line">  two.addEventListener(&apos;click&apos;, function () &#123;</div><div class="line">    console.log(&apos;two&apos;);</div><div class="line">  &#125;, false);</div><div class="line">  three.addEventListener(&apos;click&apos;, function () &#123;</div><div class="line">    console.log(&apos;three&apos;);</div><div class="line">  &#125;, false);</div><div class="line">  four.addEventListener(&apos;click&apos;, function () &#123;</div><div class="line">    console.log(&apos;four&apos;);</div><div class="line">  &#125;, false);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>上面代码将四个嵌套的div都绑定了冒泡，执行触发顺序为：<br>当点击one时，输出：one<br>当点击two时，输出：two one<br>当点击three时，输出：three two one<br>当点击four时，输出：four three two one   </p>
<p>修改下代码，将上面<code>addEventListener</code>第三个参数改为<code>true</code>，则为捕获事件，执行顺序如下：<br>当点击one时，输出：one<br>当点击two时，输出：one two<br>当点击three时，输出：one two three<br>当点击four时，输出：one two three four   </p>
<p>我们再来修改一下js代码，将第二个div改为捕获事件，其他不变：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">one.addEventListener(&apos;click&apos;, function () &#123;</div><div class="line">  console.log(&apos;one&apos;);</div><div class="line">&#125;, false);</div><div class="line">two.addEventListener(&apos;click&apos;, function () &#123;</div><div class="line">  console.log(&apos;two-capture&apos;);</div><div class="line">&#125;, true);</div><div class="line">three.addEventListener(&apos;click&apos;, function () &#123;</div><div class="line">  console.log(&apos;three&apos;);</div><div class="line">&#125;, false);</div><div class="line">four.addEventListener(&apos;click&apos;, function () &#123;</div><div class="line">  console.log(&apos;four&apos;);</div><div class="line">&#125;, false);</div></pre></td></tr></table></figure>
<p>假设目标元素为four，执行代码，输出的是 two-capture four three one。<br>one为根元素祖先，浏览器会从one -&gt; two -&gt; three -&gt; four依次查找，直到找到目标元素four，接着开始向上冒泡 four -&gt; three -&gt; two -&gt; one<br>one为冒泡事件，忽略，<br>two为捕获事件，输出two-capture,<br>three为冒泡事件，忽略，<br>four为目标元素，输出four，然后执行冒泡，<br>three为冒泡事件，输出three，<br>two为捕获事件，忽略，<br>one为冒泡事件，输出one   </p>
<p>现在测试一下某一元素同时绑定捕获和冒泡的请款，修改代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">one.addEventListener(&apos;click&apos;, function () &#123;</div><div class="line">  console.log(&apos;one-bubble&apos;);</div><div class="line">&#125;, false);</div><div class="line">one.addEventListener(&apos;click&apos;, function () &#123;</div><div class="line">  console.log(&apos;one-capture&apos;);</div><div class="line">&#125;, true);</div><div class="line">two.addEventListener(&apos;click&apos;, function () &#123;</div><div class="line">  console.log(&apos;two&apos;);</div><div class="line">&#125;, false);</div><div class="line">three.addEventListener(&apos;click&apos;, function () &#123;</div><div class="line">  console.log(&apos;three&apos;);</div><div class="line">&#125;, false);</div><div class="line">four.addEventListener(&apos;click&apos;, function () &#123;</div><div class="line">  console.log(&apos;four&apos;);</div><div class="line">&#125;, false);</div></pre></td></tr></table></figure>
<p>当目标元素为four时，触发事件，输出代码为：one-capture four three two one-bubble<br>当目标元素为one时，触发事件，输出代码为：one-bubble one-capture，这时发现他并没有先执行one的捕获事件，而是先执行了冒泡事件，这是因为one声明冒泡在声明捕获的前面</p>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul>
<li>事件绑定了几次就出发几次   </li>
<li>如果目标元素同时绑定捕获和冒泡，按照声明顺序执行   </li>
<li>其他情况严格按照DOM2标准执行，先捕获后冒泡</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看见一个题目，一个元素如果捕获和冒泡都绑定了，事件会触发几次，执行顺序如何？&lt;br&gt;没有想到答案，感觉知识匮乏，技术太差怎么办呢？直接弄个demo看下，做个笔记记录下，免得下次又忘了。&lt;br&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="DOM2事件" scheme="http://yoursite.com/tags/DOM2%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>关于javascript继承的学习笔记</title>
    <link href="http://yoursite.com/2017/07/07/inherit/"/>
    <id>http://yoursite.com/2017/07/07/inherit/</id>
    <published>2017-07-07T03:04:56.000Z</published>
    <updated>2017-07-07T03:11:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>这几天学习js的继承，看了一些文章，其中有<br><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" target="_blank">阮一峰的对象之间的“继承”的五种方法</a>，<a href="http://keenwon.com/1524.html" target="_blank">keenwon的ES5和ES6中的继承</a>，对JavaScript的继承有了一些了解，顺便写个学习总结。</p>
<p>每个对象都有一个私有属性（[[Prototype]]），它持有一个连接到另一个称其为prototype对象的链接。该原型对象具有一个自己的原型，等等，直到达到一个对象的prototype为null。<br>null没有prototype。<br><a id="more"></a></p>
<h1 id="基于原型链的继承"><a href="#基于原型链的继承" class="headerlink" title="基于原型链的继承"></a>基于原型链的继承</h1><p>遵循ECMAScript的标准，someObject.__proto__符号是用于指派someObject的原型。等同于JavaScript的__proto__属性。ES6开始，__proto__可以用<code>Object.getPrototypeOf()</code>和<code>Object.setPrototypeOf()</code>访问器来访问。   </p>
<p>当继承的函数被调用时，<code>this</code> 指向的是当前继承的对象，而不是继承的函数所在的原型对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var o = &#123;</div><div class="line">	a: 2,</div><div class="line">	m: function() &#123;</div><div class="line">		return this.a + 1;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">console.log(o.m());		// 3</div><div class="line"></div><div class="line">var p = Object.create(o);</div><div class="line">//	p.__proto__是o</div><div class="line">p.a = 12;</div><div class="line">console.log(p.m());		// 13</div></pre></td></tr></table></figure>
<p><br></p>
<h1 id="不同的方法创建对象和生成原型链"><a href="#不同的方法创建对象和生成原型链" class="headerlink" title="不同的方法创建对象和生成原型链"></a>不同的方法创建对象和生成原型链</h1><h3 id="普通语法"><a href="#普通语法" class="headerlink" title="普通语法"></a>普通语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var o = &#123; a: 1&#125;;</div><div class="line">// o ---&gt; Object.prototype ---&gt; null</div><div class="line"></div><div class="line">var a = [&apos;yo&apos;, &apos;whadup&apos;, &apos;?&apos;];</div><div class="line">// a ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null</div><div class="line"></div><div class="line">function f()&#123; return 2; &#125;</div><div class="line">// f ---&gt; Function.prototype ---&gt; Object.prototype ---&gt; null</div><div class="line">``` </div><div class="line"></div><div class="line">### 构造器创建对象</div><div class="line">在JavaScript中，构造器就是一个普通函数。当使用`new 操作符`来作用这个函数时，它就可以被称为构造函数（方法）。</div></pre></td></tr></table></figure>
<p>function Graph() {<br>    this.vertices = [];<br>    this.edges = [];<br>}<br>Graph.prptotype = {<br>    addVertex: function (v) {<br>        this.vertices.push(v);<br>    }<br>}<br>var g = new Graph();<br>// 在g被实例化时，g.<strong>proto</strong>指向Graph.prototype.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 使用Object.create创建对象</div></pre></td></tr></table></figure></p>
<p>var a = {a: 1};<br>// a —&gt; Object.prototype —&gt; null</p>
<p>var b = Object.create(a);<br>// b —&gt; a —&gt; Object.prototype —&gt; null<br>console.log(b.a);    // 1</p>
<p>var c = Object.create(b);<br>// c —&gt; b —&gt; a —&gt; Object.prototype —&gt; null</p>
<p>var d = Object.create(null);<br>// d —&gt; null<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"># 构造函数的继承方法</div></pre></td></tr></table></figure></p>
<p>function Animal () {<br>    this.species = ‘动物’;<br>}</p>
<p>function Cat (name, color) {<br>    this.name = name;<br>    this.color = color;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">### 1、构造函数绑定</div><div class="line">使用call或者apply方法，将父对象的构造函数绑定在子对象中</div></pre></td></tr></table></figure></p>
<p>function Cat(name, color) {<br>    Animal.apply(this, arguments);<br>    this.name = name;<br>    this.color = color;<br>}</p>
<p>var cat1 = new Cat(‘大毛’, ‘黄色’);<br>alert(cat1.species);    // 动物<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 2、prototype模式</div></pre></td></tr></table></figure></p>
<p>// 将Cat的prototype对象指向一个Animal的实例<br>Cat.prototype = new Animal();<br>Cat.prototype.constructor = Cat;    </p>
<p>var cat1 = new Cat(‘大毛’, ‘黄色’);<br>alert(cat1.species);    // 动物<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">`Cat.prototype.constructor = Cat;` :   </div><div class="line">任何一个prototype对象都有一个constructor属性，指向它的构造函数。如果没有`Cat.prototype = new Animal();`这行代码，`Cat.prototype.constructor`指向的是Cat，加上后，这段代码指向Animal。   </div><div class="line">更重要的是每个实例也有一个constructor属性，默认调用prototype对象的constructor属性。</div></pre></td></tr></table></figure></p>
<p>alert(cat1.constructor == Cat.prototype.constructor);    // true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">运行`Cat.prototype = new Animal();`后，cat1.constructor也指向Animal！   </div><div class="line">这会导致继承链的紊乱，因此需要手动矫正。</div><div class="line"></div><div class="line">### 3、直接继承prototype</div><div class="line">这种方法是对第二种的改进。Animal对象中，不变的属性都可以写入Animal.prototype中，所以可以让Cat()跳过Animal()，直接继承Animal.prototype。</div></pre></td></tr></table></figure></p>
<p>function Animal () {}<br>Animal.prototype.species = ‘动物’;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>// 将Cat的prototype对象指向Animal的prototype对象，完成继承<br>Cat.prototype = Animal.prototype;<br>Cat.prototype.constructor = Cat;</p>
<p>var cat1 = new Cat(‘大毛’, ‘黄色’);<br>alert(cat2.species);    // 动物<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">与第二中方法相比，效率比较高，省内存。缺点是Cat.prototype和Animal.prototype现在指向了同一对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。</div></pre></td></tr></table></figure></p>
<p>Cat.prototype.constructor = Cat;<br>// 这段代码实际上把Animal.prototype对象的constructor属性也修改了：<br>alert(Animal.prototype.constructor);        // Cat<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 4、利用空对象作为中介</div></pre></td></tr></table></figure></p>
<p>var F = function () {};<br>F.prototype = Animal.prototype;<br>Cat.prototype = new F();<br>Cat.prototype.constructor = Cat;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">F是空对象，所以几乎不占内存。此时修改Cat的prototype对象，就不会影响到Animal的prototype对象。   </div><div class="line">将其封装成一个函数，方便使用。</div></pre></td></tr></table></figure></p>
<p>function extend(Child, Parent) {<br>    var F = function () {};<br>    F.prototype = Parent.prototype;<br>    Child.prototype = new F();<br>    Child.prototype.constructor = Child;<br>    Child.uber = Parent.prototype;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">` Child.uber = Parent.prototype; `意思是为子对象设一个uber属性，这个属性直接指向父对象的prototype属性。等于在子对象上打开一条通道，可以直接调用父对象的方法。在这只是为了实现继承的完备性，纯属备用性质。</div><div class="line"></div><div class="line">### 5、拷贝继承</div><div class="line">将父对象的所有属性和方法拷贝进子对象。</div></pre></td></tr></table></figure></p>
<p>function Animal(){}<br>Animal.prototype.species = ‘动物’;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">// 实现属性拷贝目的的函数</div><div class="line">function extend2(Child, Parent) &#123;</div><div class="line">	var p = Parent.prototype;</div><div class="line">	var c = Child.prototype;</div><div class="line">	</div><div class="line">	for (var i in p) &#123;</div><div class="line">		c[i] = p [i];</div><div class="line">	&#125;</div><div class="line">	c.uber = p;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 使用</div><div class="line">extend2(Cat, Animal);</div><div class="line">var cat1 = new Cat(&apos;大毛&apos;, &apos;黄色&apos;);</div><div class="line">alert(cat1.species);	// 动物</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天学习js的继承，看了一些文章，其中有&lt;br&gt;&lt;a href=&#39;http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html&#39; target=&#39;_blank&#39;&gt;阮一峰的对象之间的“继承”的五种方法&lt;/a&gt;，&lt;a href=&#39;http://keenwon.com/1524.html&#39; target=&#39;_blank&#39;&gt;keenwon的ES5和ES6中的继承&lt;/a&gt;，对JavaScript的继承有了一些了解，顺便写个学习总结。&lt;/p&gt;
&lt;p&gt;每个对象都有一个私有属性（[[Prototype]]），它持有一个连接到另一个称其为prototype对象的链接。该原型对象具有一个自己的原型，等等，直到达到一个对象的prototype为null。&lt;br&gt;null没有prototype。&lt;br&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>applicable-device</title>
    <link href="http://yoursite.com/2017/07/06/applicable-device/"/>
    <id>http://yoursite.com/2017/07/06/applicable-device/</id>
    <published>2017-07-06T08:28:04.000Z</published>
    <updated>2017-07-06T08:28:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>自适应网站中我们用meta告诉浏览器网页自适应规则：   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,user-scalable=yes&quot; /&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>通用搜索引擎对自适应识别校验代码  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// no-siteapp和no-transform，是告诉搜索引擎不要把网页转码</div><div class="line">&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-transform&quot; /&gt; </div><div class="line">&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot; /&gt;</div></pre></td></tr></table></figure>
<p>以上的代码已经可以让百度识别自适应网站了，但为了对百度更友好，让它更方便识别，我们可以添加<code>applicable-device</code>:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;applicable-device&quot; content=&quot;pc,mobile&quot;&gt;</div></pre></td></tr></table></figure>
<p>这个meta标签，表示页面同时适合在移动设备和PC上进行浏览</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自适应网站中我们用meta告诉浏览器网页自适应规则：   &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1.0,user-scalable=yes&amp;quot; /&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="meta" scheme="http://yoursite.com/tags/meta/"/>
    
  </entry>
  
  <entry>
    <title>h5-meta</title>
    <link href="http://yoursite.com/2017/07/06/h5-meta/"/>
    <id>http://yoursite.com/2017/07/06/h5-meta/</id>
    <published>2017-07-06T07:58:22.000Z</published>
    <updated>2017-07-06T08:04:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="meta标签的作用"><a href="#meta标签的作用" class="headerlink" title="meta标签的作用"></a>meta标签的作用</h1><p>搜索引擎优化（SEO），定义页面使用语言，自动刷新并指向新的页面，实现页面转换时的动态效果，控制页面缓冲，网页定级评论，控制网页显示的窗口等<br><a id="more"></a> </p>
<h1 id="meta标签的组成"><a href="#meta标签的组成" class="headerlink" title="meta标签的组成"></a>meta标签的组成</h1><p>meta主要有两个属性，分别是http-equiv属性和name属性，</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">http-equiv</td>
<td style="text-align:left">content-type<br>expires<br>refresh<br>set-cookie</td>
<td style="text-align:left">把 content 属性关联到 HTTP 头部。</td>
</tr>
<tr>
<td style="text-align:left">name</td>
<td style="text-align:left">author<br>description<br>keywords<br>generator<br>revised<br>others</td>
<td style="text-align:left">把 content 属性关联到一个名称。</td>
</tr>
<tr>
<td style="text-align:left">scheme</td>
<td style="text-align:left">some_text</td>
<td style="text-align:left">定义用于翻译 content 属性值的格式。</td>
</tr>
</tbody>
</table>
<p><br></p>
<h1 id="H5常用meta设置"><a href="#H5常用meta设置" class="headerlink" title="H5常用meta设置"></a>H5常用meta设置</h1><h2 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; </div><div class="line">	content=&quot;width=device-width,</div><div class="line">			height=device-height,</div><div class="line">			initial-scale=1.0, </div><div class="line">			minimum-scale=1.0, </div><div class="line">			maximum-scale=1.0, </div><div class="line">			user-scalable=no&quot;&gt;</div></pre></td></tr></table></figure>
<p><b>width = [pixel_value | device-width]</b><br>控制viewport的大小，可以指定一个值或者特殊的值，如device-width为设备的宽度（单位为缩放为100%是的CSS的像素）。   </p>
<p><b>height = [pixel_value | device-height]</b><br>和width相对应，指定高度。</p>
<p><b>initial-scale = float_value </b><br>初始缩放。即页面初始缩放程度。为浮点值，是页面大小的一个乘数。例如，如果你设置初始缩放为‘1.0’，那么，web页面在展示的时候就会以target density分辨率的1:1来展现。如果设置为‘2.0’，那么这个页面就会放大为2倍。   </p>
<p><b>maximum-scale = float_value</b><br>最大缩放。即允许的最大缩放程度。浮点值，用以指出页面大小与屏幕大小相比的最大乘数。例如，将值设置为‘2.0’，那么页面与target size相比，最多能放大2倍。</p>
<p><b>user-scalable = [yes | no]</b><br>用户调整缩放。即用户能否改变页面缩放程度。如果设置为yes，表示允许用户对其改变，反之为no。默认值为yes。如果设置为no，那么mininum-scale和maximum-scale都将被忽略，因为根本不可能缩放。</p>
<p>所有的缩放值都必须在0.01 - 10的范围之内。</p>
<p>安卓中还支持<code>target-densitydpi</code>这个私有属性，它表示目标设备的密度等级，作用是觉得css中的1px代表多少物理像素<br><b>target-densitydpi = [high-dpi | medium-dpi | low-dpi | device-dpi]</b><br>当<code>target-densitydpi=device-dpi</code>时，css中的1px会等于物理像素中的1px。<br>因为这个属性只有安卓支持，并且安卓已经决定要废弃这个属性了，所以这个属性我们要避免使用。</p>
<p><br></p>
<hr>
<h2 id="IOS设备："><a href="#IOS设备：" class="headerlink" title="IOS设备："></a>IOS设备：</h2><h2 id="format-detection"><a href="#format-detection" class="headerlink" title="format-detection"></a>format-detection</h2><p>用来检测html里的一些格式。主要属性设置有：   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no,email=no,adress=no&quot;&gt;</div></pre></td></tr></table></figure>
<p><b>telephone:</b><br>使设备浏览网页时对数字不启用电话功能（不同设备结束不同，iTouch点击数字存入为联系人，iPhone手机上为拨号的超链接），忽略将页面中的数字识别为电话号码。<code>telephone=no</code>就禁止了把数字转化为拨号链接。需启用电话功能将<code>telephone=yes</code>即可，若在页面上面有 Google Maps, iTunes 和 YouTube 的链接会在ios设备上打开相应的程序组件。</p>
<p><b>email</b><br>告诉设备不识别邮箱，点击之后不自动发送。<code>email=no</code>禁止作为邮箱地址。默认开启。</p>
<p><b>adress</b><br><code>adress=no</code>禁止跳转至地图！默认开启。</p>
<h2 id="apple-mobile-web-app-capable"><a href="#apple-mobile-web-app-capable" class="headerlink" title="apple-mobile-web-app-capable"></a>apple-mobile-web-app-capable</h2><p>是否启用 WebApp 全屏模式，删除默认的苹果工具栏和菜单栏。content有两个值‘yes’和‘no’。当需要显示时meta就不用加了，默认就是显示。   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</div></pre></td></tr></table></figure>
<h2 id="apple-mobile-web-app-status-bar-style"><a href="#apple-mobile-web-app-status-bar-style" class="headerlink" title="apple-mobile-web-app-status-bar-style"></a>apple-mobile-web-app-status-bar-style</h2><p>控制状态栏显示样式（当启动webapp功能时，显示手机信号、时、电池的顶部导航栏的颜色）。默认为default(白色)，可以定为black(黑色)和black-translucent(灰色半透明)。</p>
<p>在iOS中有两个meta值，apple-mobile-web-app-capable和apple-mobile-web-app-status-bar-style，这两个会让网页内容以应用程序风格显示，并使状态栏透明。</p>
<h2 id="apple-mobile-web-app-title"><a href="#apple-mobile-web-app-title" class="headerlink" title="apple-mobile-web-app-title"></a>apple-mobile-web-app-title</h2><p>添加到主屏后的标题（iOS 6 新增）   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot;&gt;</div></pre></td></tr></table></figure>
<h2 id="apple-itunes-app"><a href="#apple-itunes-app" class="headerlink" title="apple-itunes-app"></a>apple-itunes-app</h2><p>添加智能 App 广告条 Smart App Banner（ios 6+ Safari）:告诉浏览器这个网站对应的app，并在页面上显示下载banner</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt;</div></pre></td></tr></table></figure>
<p><br></p>
<hr>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 针对手持设备优化，主要针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</div><div class="line">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</div><div class="line"></div><div class="line">&lt;!-- 微软的老式浏览器 --&gt;</div><div class="line">&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</div><div class="line"></div><div class="line">&lt;!-- UC强制竖屏 --&gt;</div><div class="line">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</div><div class="line"></div><div class="line">&lt;!-- QQ强制竖屏 --&gt;</div><div class="line">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</div><div class="line"></div><div class="line">&lt;!-- UC强制全屏 --&gt;</div><div class="line">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</div><div class="line"></div><div class="line">&lt;!-- QQ强制全屏 --&gt;</div><div class="line">&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</div><div class="line"></div><div class="line">&lt;!-- UC应用模式 --&gt;</div><div class="line">&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</div><div class="line"></div><div class="line">&lt;!-- QQ应用模式 --&gt;</div><div class="line">&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</div><div class="line"></div><div class="line">&lt;!-- windowsphone点击无高光--&gt;</div><div class="line">&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;meta标签的作用&quot;&gt;&lt;a href=&quot;#meta标签的作用&quot; class=&quot;headerlink&quot; title=&quot;meta标签的作用&quot;&gt;&lt;/a&gt;meta标签的作用&lt;/h1&gt;&lt;p&gt;搜索引擎优化（SEO），定义页面使用语言，自动刷新并指向新的页面，实现页面转换时的动态效果，控制页面缓冲，网页定级评论，控制网页显示的窗口等&lt;br&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="meta" scheme="http://yoursite.com/tags/meta/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的遍历循环方法之map、forEach、for-in、for-of</title>
    <link href="http://yoursite.com/2017/06/29/js-traversal/"/>
    <id>http://yoursite.com/2017/06/29/js-traversal/</id>
    <published>2017-06-29T03:49:55.000Z</published>
    <updated>2017-06-30T08:40:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p>对数组的所有成员一次调用一个函数，根据函数结果返回一个新数组。   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var array = [1, 2, 3];</div><div class="line">array.map(function (n) &#123;</div><div class="line">	return n + 1;</div><div class="line">&#125;);</div><div class="line">// [2, 3, 4]</div><div class="line"></div><div class="line">array</div><div class="line">// [1, 2, 3]</div><div class="line"></div><div class="line">/*</div><div class="line"> *	array数组所有成员都加上1，组成新数组，原数组没有变化</div><div class="line"> */</div></pre></td></tr></table></figure>
<a id="more"></a> 
<p><code>map</code>方法接收一个函数作为参数。调用时传入三个参数，分别是当前成员、当前位置和数组本身。    </p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var new_array = arr.map(function callback(currentValue, index, array) &#123;</div><div class="line">    // Return element for new_array</div><div class="line">&#125;[, thisArg])</div><div class="line"></div><div class="line">// thisArg 可选的。执行 callback 函数时 使用的this 值</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</div><div class="line">[1, 2].map(function (e) &#123;</div><div class="line">	return this[e];</div><div class="line">&#125;, arr)</div><div class="line">// [&apos;b&apos;, &apos;c&apos;]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[1, 2, 3].map(function (elem, index, arr) &#123;</div><div class="line">	return elem * index;</div><div class="line">&#125;);</div><div class="line">//	[0, 2, 6]</div></pre></td></tr></table></figure>
<p><code>map</code>方法还可以用于字符串，用来遍历字符串的每个字符。但不能直接使用，要通过函数的<code>call</code>方法间接使用，或者先转为数组，然后使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var upper = function (x) &#123;</div><div class="line">	return x.toUpperCase();</div><div class="line">&#125;;</div><div class="line"></div><div class="line">[].map.call(&apos;abc&apos;, upper)</div><div class="line">// [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</div><div class="line"></div><div class="line">// 或者</div><div class="line">&apos;abc&apos;.split(&apos;&apos;).map(upper)</div><div class="line">// [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</div><div class="line"> </div><div class="line"> </div><div class="line">// 反转字符串：</div><div class="line">var str = &apos;12345&apos;;</div><div class="line">Array.prototype.map.call(str, function(x) &#123;</div><div class="line">	return x;</div><div class="line">&#125;).reverse().join(&apos;&apos;);</div><div class="line">// &apos;54321&apos;</div></pre></td></tr></table></figure>
<p>如果数组有空位，<code>map</code>方法的回调函数在这个位置不会执行，会跳过数组的空位。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var f = function(n) &#123; return n + 1 &#125;;</div><div class="line"></div><div class="line">[1, undefined, 2].map(f)	// [2, NaN, 3]</div><div class="line">[1, null, 2].map(f)			// [2, 1, 3]</div><div class="line">[1,  , 2].map(f)				// [2,  , 3]</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h2><p><code>forEach</code>与<code>map</code>方法相似，遍历数组所有成员，执行某种操作，但不返回值。   </p>
<p><code>forEach</code>方法接收一个函数作为参数。调用时传入三个参数，分别是当前成员、当前位置和数组本身。语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">array.forEach(callback(currentValue, index, array) &#123;</div><div class="line">	// do something</div><div class="line">&#125;, this)</div><div class="line"></div><div class="line">array.forEach(callback[, thisArg])</div><div class="line"></div><div class="line">// thisArg 可选参数。当执行回调 函数时用作this的值(参考对象)。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function log(element, index, array) &#123;</div><div class="line">	console.log(&apos;[&apos; + index + &apos;] = &apos; + element);</div><div class="line">&#125;</div><div class="line"></div><div class="line">[2, 5, 9].forEach(log);</div><div class="line">// [0] = 2</div><div class="line">// [1] = 5</div><div class="line">// [3] = 9</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 接受第二个参数，用来绑定回调函数的 this 关键字</div><div class="line">var out = [];</div><div class="line"></div><div class="line">[1, 2, 3].forEach(function(elem) &#123;</div><div class="line">	this.push(elem * elem);</div><div class="line">&#125;, out);</div><div class="line"></div><div class="line">out		// [1, 4, 9]</div></pre></td></tr></table></figure>
<p><code>forEach</code>会跳过数组的空位   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var log = function (n) &#123; console.log(n + 1); &#125;;</div><div class="line"></div><div class="line">[1, undefined, 2].forEach(log)	</div><div class="line">// 2</div><div class="line">// NaN</div><div class="line">// 3</div><div class="line"></div><div class="line">[1, null, 2].forEach(log)</div><div class="line">// 2</div><div class="line">// 1</div><div class="line">// 3</div><div class="line"></div><div class="line">[1,  , 2].forEach(log)</div><div class="line">// 2</div><div class="line">// 3</div></pre></td></tr></table></figure>
<p>注：<code>forEach</code>方法无法中断执行，会将所有成员遍历完。如果想符合某种条件中断遍历，使用<code>for</code>循环。   </p>
<p><code>forEach</code>也可用于类似数组的对象和字符串。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">	0: 1,</div><div class="line">	a: &apos;hello&apos;,</div><div class="line">	length: 1</div><div class="line">&#125;</div><div class="line"></div><div class="line">Array.prototype.forEach.call(obj, function (elem, i) &#123;</div><div class="line">	console.log(i + &apos;:&apos; + elem);</div><div class="line">&#125;);</div><div class="line">// 0:1</div><div class="line"></div><div class="line">// obj是一个类似数组的对象，forEach方法可以遍历它的数字键</div><div class="line"></div><div class="line">var str = &apos;hello&apos;;</div><div class="line">Array.prototype.forEach.call(str, function (elem, i) &#123;</div><div class="line">	console.log(i + &apos;:&apos; + elem);</div><div class="line">&#125;);</div><div class="line">// 0:h</div><div class="line">// 1:e</div><div class="line">// 2:l</div><div class="line">// 3:l</div><div class="line">// 4:o</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h2><p><code>for-in</code>循环实际是为循环<code>enumerable</code>对象而设计的，一般不推荐循环数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">	a: 1,</div><div class="line">	b: 2,</div><div class="line">	c: 3</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (var prop in obj) &#123;</div><div class="line">	console.log(&apos;obj.&apos; + prop + &apos; = &apos; + obj[prop]);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// obj.a = 1</div><div class="line">// obj.b = 2</div><div class="line">// obj.c = 3</div><div class="line"></div><div class="line">/* 循环数组 */</div><div class="line">fof (var i in maArray) &#123;			// 不推荐</div><div class="line">	console.log(myArray[index]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<h2 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h2><p>语法：   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (variable of object) &#123;</div><div class="line">	statment</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>遍历Array:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var array = [10, 20, 30];</div><div class="line">for (let value of array) &#123;</div><div class="line">	console.log(value);</div><div class="line">&#125;</div><div class="line">// 10</div><div class="line">// 20</div><div class="line">// 30</div></pre></td></tr></table></figure>
<p>遍历String：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let it = &apos;boo&apos;;</div><div class="line">for (let value of it) &#123;</div><div class="line">	console.log(value);</div><div class="line">&#125;</div><div class="line">// b</div><div class="line">// o</div><div class="line">// o</div></pre></td></tr></table></figure>
<p>遍历DOM集合：   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 给每个article标签的p子标签添加一个‘read’ class</div><div class="line"></div><div class="line">let articleParagrahs = documment.querySelectorAll(&apos;article &gt; p&apos;);</div><div class="line"></div><div class="line">for (let paragrahs of articleParagraphs) &#123;</div><div class="line">	paragrahs.classList.add(&apos;read&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>遍历生成器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function* fibonacci() &#123;		// 一个生成器函数</div><div class="line">	let [prev, curr] = [0, 1];</div><div class="line">	for (;;) &#123;</div><div class="line">		[prev, curr] = [curr, prev + curr];</div><div class="line">		yield curr;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (let n of fibonacci()) &#123;</div><div class="line">	if (n &gt; 1000)</div><div class="line">		break;</div><div class="line">	console.log(n);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<hr>
<p><br></p>
<h2 id="for-of-与-for-in的区别"><a href="#for-of-与-for-in的区别" class="headerlink" title="for of 与 for in的区别"></a>for of 与 for in的区别</h2><p>for in循环会遍历一个object所有的可枚举属性。<br>for of是为了各种collection对象专门定制的，并不适用于所有的object。它会议这种方式迭代出任何拥有[Symbol.iterator]属性的collection对象的每个元素。   </p>
<p>for in 遍历（当前对象及原型上的）每个元素属性名称<br>for of 遍历（当前对象上的）每一个属性值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Object.prototype.objCustom = function () &#123;&#125;;</div><div class="line">Array.prototype.arrCustom = function () &#123;&#125;;</div><div class="line"></div><div class="line">let it = [3, 5, 7];</div><div class="line">it.foo = &apos;hello&apos;;</div><div class="line"></div><div class="line">for (let i in it) &#123;</div><div class="line">	console.log(i);		// logs 0, 1, 2, &apos;foo&apos;, &apos;arrCustom&apos;, &apos;objCustom&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (let i of it) &#123;</div><div class="line">	console.log(i);		// logs 3, 5, 7</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;map&quot;&gt;&lt;a href=&quot;#map&quot; class=&quot;headerlink&quot; title=&quot;map()&quot;&gt;&lt;/a&gt;map()&lt;/h2&gt;&lt;p&gt;对数组的所有成员一次调用一个函数，根据函数结果返回一个新数组。   &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var array = [1, 2, 3];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;array.map(function (n) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	return n + 1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// [2, 3, 4]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;array&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// [1, 2, 3]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *	array数组所有成员都加上1，组成新数组，原数组没有变化&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>git 分支操作</title>
    <link href="http://yoursite.com/2017/03/13/git-branch/"/>
    <id>http://yoursite.com/2017/03/13/git-branch/</id>
    <published>2017-03-13T06:35:58.000Z</published>
    <updated>2017-06-30T08:39:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里主要简单记录了一下一些git分支操作命令，方便自己查询用的。</p>
<h1 id="git-分支"><a href="#git-分支" class="headerlink" title="git 分支"></a>git 分支</h1><h3 id="创建一个名为-dev-的分支"><a href="#创建一个名为-dev-的分支" class="headerlink" title="创建一个名为 dev 的分支"></a>创建一个名为 dev 的分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b dev</div></pre></td></tr></table></figure>
<h3 id="推送本地的dev分支，将其作为远程的dev分支-（本地分支名-远程分支名）"><a href="#推送本地的dev分支，将其作为远程的dev分支-（本地分支名-远程分支名）" class="headerlink" title="推送本地的dev分支，将其作为远程的dev分支 （本地分支名:远程分支名）"></a>推送本地的dev分支，将其作为远程的dev分支 （本地分支名:远程分支名）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin dev:dev</div></pre></td></tr></table></figure>
<p>or<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin dev</div></pre></td></tr></table></figure></p>
<h3 id="作了修改之后提交到远程dev分支"><a href="#作了修改之后提交到远程dev分支" class="headerlink" title="作了修改之后提交到远程dev分支"></a>作了修改之后提交到远程dev分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">git push -u origin dev  </div><div class="line">//此时有了跟踪分支，本地dev分支跟踪了 origin/dev</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//查看跟踪分支</div><div class="line">git branch -vv</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//查看远程分支</div><div class="line">git branch -r</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//查看所有分支</div><div class="line">git branch -a</div></pre></td></tr></table></figure>
<h3 id="变基rebase"><a href="#变基rebase" class="headerlink" title="变基rebase"></a>变基rebase</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git checkout dev</div><div class="line">git rebase master</div><div class="line">//上面两步可合并为 git rebase master dev</div><div class="line">git checkout master</div><div class="line">git merge dev</div><div class="line">git push</div></pre></td></tr></table></figure>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch -D dev</div><div class="line">git push origin --delete dev</div></pre></td></tr></table></figure>
<h3 id="远程更新取回本地git-fetch"><a href="#远程更新取回本地git-fetch" class="headerlink" title="远程更新取回本地git fetch"></a>远程更新取回本地git fetch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git fetch &lt;远程主机名&gt;</div><div class="line">//清理本地分支</div><div class="line">git fetch -p</div></pre></td></tr></table></figure>
<h3 id="建立远程跟踪分支"><a href="#建立远程跟踪分支" class="headerlink" title="建立远程跟踪分支"></a>建立远程跟踪分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b serverfix origin/serverfix</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里主要简单记录了一下一些git分支操作命令，方便自己查询用的。&lt;/p&gt;
&lt;h1 id=&quot;git-分支&quot;&gt;&lt;a href=&quot;#git-分支&quot; class=&quot;headerlink&quot; title=&quot;git 分支&quot;&gt;&lt;/a&gt;git 分支&lt;/h1&gt;&lt;h3 id=&quot;创建一个名为-dev-的分支&quot;&gt;&lt;a href=&quot;#创建一个名为-dev-的分支&quot; class=&quot;headerlink&quot; title=&quot;创建一个名为 dev 的分支&quot;&gt;&lt;/a&gt;创建一个名为 dev 的分支&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git checkout -b dev&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;推送本地的dev分支，将其作为远程的dev分支-（本地分支名-远程分支名）&quot;&gt;&lt;a href=&quot;#推送本地的dev分支，将其作为远程的dev分支-（本地分支名-远程分支名）&quot; class=&quot;headerlink&quot; title=&quot;推送本地的dev分支，将其作为远程的dev分支 （本地分支名:远程分支名）&quot;&gt;&lt;/a&gt;推送本地的dev分支，将其作为远程的dev分支 （本地分支名:远程分支名）&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git push origin dev:dev&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;or&lt;br&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>css-hack</title>
    <link href="http://yoursite.com/2016/12/13/css-hack/"/>
    <id>http://yoursite.com/2016/12/13/css-hack/</id>
    <published>2016-12-13T04:50:02.000Z</published>
    <updated>2017-06-30T09:26:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-Hack"><a href="#CSS-Hack" class="headerlink" title="CSS Hack"></a>CSS Hack</h1><p>这段几天稍微看了一下css hack，就做了个笔记总结一下，主要针对IE6~IE11。但对于hack，我自己不太推荐使用。</p>
<h2 id="条件注释法"><a href="#条件注释法" class="headerlink" title="条件注释法"></a>条件注释法</h2><p>IE浏览器专有的Hack方式:<br><code>&lt;!--[if IE]&gt; 只在IE下生效 &lt;![endif]--&gt;</code></p>
<p><code>&lt;!--[if IE 8]&gt; 只在IE8下生效 &lt;![endif]--&gt;</code></p>
<p><code>&lt;!--[if gte IE 8]&gt; 只在IE8以上(包括IE8)版本IE浏览器显示生效 &lt;![endif]--&gt;</code></p>
<p><code>&lt;!--[if lt IE 8]&gt; 只在IE8以下(包括IE8)版本IE浏览器显示生效 &lt;![endif]--&gt;</code></p>
<p><code>&lt;!--[if !IE 8]&gt; 只在IE8上不生效 &lt;![endif]--&gt;</code></p>
<p><code>&lt;!--[if !IE]&gt;&lt;!--&gt; 非IE浏览器生效 &lt;!--&lt;![endif]--&gt;</code></p>
<p>但当IE的版本到到达10/11后，开始不支持这种条件性注释</p>
<a id="more"></a>
<h2 id="符号前缀"><a href="#符号前缀" class="headerlink" title="符号前缀"></a>符号前缀</h2><h3 id="CSS属性前缀"><a href="#CSS属性前缀" class="headerlink" title="CSS属性前缀:"></a>CSS属性前缀:</h3><p><code>&#39;_&#39;</code> : IE6<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Selector</span> &#123; <span class="attribute">_property</span>: value; &#125;</div></pre></td></tr></table></figure></p>
<p><code>&#39;*&#39;</code> : IE6/7<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Selector &#123;*property: value;&#125;</div></pre></td></tr></table></figure></p>
<p><code>&#39;#&#39;</code> : IE6/7<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Selector &#123;#property: value;&#125;</div></pre></td></tr></table></figure></p>
<p><code>&#39;+&#39;</code> : IE7<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Selector</span> +<span class="selector-tag">property</span>: <span class="selector-tag">value</span>;</div></pre></td></tr></table></figure></p>
<p><code>&#39;\0&#39;</code> : IE8+<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Selector</span> &#123;<span class="attribute">property</span>: value\<span class="number">0</span>;&#125;</div></pre></td></tr></table></figure></p>
<p><code>&#39;\9&#39;</code> : IE6 ~ IE10<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Selector</span> &#123;<span class="attribute">property</span>: value\<span class="number">9</span>;&#125;</div></pre></td></tr></table></figure></p>
<p><code>&#39;\0\9&#39;</code> : IE8+<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Selector</span> &#123;<span class="attribute">property</span>: value\<span class="number">0</span>\<span class="number">9</span>;&#125;</div></pre></td></tr></table></figure></p>
<p><code>&#39;\9\0&#39;</code> :IE9/10<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Selector</span> &#123;<span class="attribute">property</span>: value\<span class="number">9</span>\<span class="number">0</span>;&#125;</div></pre></td></tr></table></figure></p>
<p>注意hack的书写顺序</p>
<h3 id="选择器前缀"><a href="#选择器前缀" class="headerlink" title="选择器前缀:"></a>选择器前缀:</h3><p><code>&#39;*html selector&#39;</code> : IE6<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*<span class="selector-tag">html</span> <span class="selector-tag">Selector</span> &#123;<span class="attribute">property</span>: value;&#125;</div></pre></td></tr></table></figure></p>
<p><code>&#39;*+html selector&#39;</code> &amp;&amp; <code>&#39;*:first-child+html&#39;</code> : 针对IE7<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*+html Selector &#123;property: value;&#125;</div><div class="line">'*:first-child+html' Selector &#123;property: value;&#125;</div></pre></td></tr></table></figure></p>
<p><code>:root Selector {property: value\9;}</code>    IE9/10</p>
<h3 id="media方法"><a href="#media方法" class="headerlink" title="@media方法"></a>@media方法</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">IE6/7 :</div><div class="line">@media screen\9&#123;</div><div class="line">	Selector &#123;property: value;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">IE8</span> :</div><div class="line">@<span class="keyword">media</span> \<span class="number">0s</span>creen&#123;</div><div class="line">	<span class="selector-tag">Selector</span> &#123;<span class="attribute">property</span>: value;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">IE8-</span> :</div><div class="line">@<span class="keyword">media</span> \<span class="number">0s</span>creen\,screen\<span class="number">9</span>&#123;</div><div class="line">	<span class="selector-tag">Selector</span> &#123;<span class="attribute">property</span>: value;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">IE8</span>+ :</div><div class="line">@<span class="keyword">media</span> screen\<span class="number">0</span>&#123;</div><div class="line">	<span class="selector-tag">Selector</span> &#123;<span class="attribute">property</span>: value;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">IE9</span>+ :</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">0</span>\<span class="number">0</span>)&#123;</div><div class="line">	<span class="selector-tag">Selector</span> &#123;<span class="attribute">property</span>: value;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">IE10</span>+ :</div><div class="line">@<span class="keyword">media</span> screen and (-ms-high-contrast: active), (-ms-high-contrast: none)&#123;</div><div class="line">	<span class="selector-tag">Selector</span> &#123;<span class="attribute">property</span>: value;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@-<span class="keyword">moz</span>-<span class="keyword">document</span> url-prefix() &#123; </div><div class="line">  <span class="selector-class">.selector</span> &#123; <span class="attribute">property</span>: value; &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Webkit内核浏览器-chrome-and-safari"><a href="#Webkit内核浏览器-chrome-and-safari" class="headerlink" title="Webkit内核浏览器(chrome and safari)"></a>Webkit内核浏览器(chrome and safari)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen and (-webkit-min-device-pixel-ratio:<span class="number">0</span>)&#123;</div><div class="line">	<span class="selector-class">.selector</span> &#123; <span class="attribute">property</span>: value; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br><br></p>
<h3 id="IE10-css-hack"><a href="#IE10-css-hack" class="headerlink" title="IE10 css hack"></a>IE10 css hack</h3><h4 id="特性检测：-cc-on"><a href="#特性检测：-cc-on" class="headerlink" title="特性检测：@cc_on"></a>特性检测：@cc_on</h4><p>我们可以利用IE私有的<code>条件编译</code>结合条件注释(确保IE6~9不承认它)来提供针对IE10的css hack，然后使用它的特点检测<code>@cc_on</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> ! IE]&gt;&lt;!--&gt;</div><div class="line">	&lt;script&gt;</div><div class="line">		if(/*@cc_on!@*/false)&#123;</div><div class="line">			document.documentElement.className+=' ie10';</div><div class="line">		&#125;</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;!--&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<p>注意<code>/*@cc_on!@*/</code>中间的这个<code>!</code>感叹号。<br>接下来就可以在ie10中给html元素添加一个class=”ie10”，然后针对ie10样式就可以使用这个选择器了，如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ie10</span> <span class="selector-class">.example</span> &#123;</div><div class="line">	<span class="comment">/* IE10-only styles go here */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>IE11已不支持<code>@cc_on</code>，所以我们也可以这样区分：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if !IE]&gt;&lt;!--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="comment">// 针对IE10</span></div><div class="line">        <span class="keyword">if</span> (<span class="comment">/*@cc_on!@*/</span><span class="literal">false</span>) &#123;</div><div class="line">            <span class="built_in">document</span>.documentElement.className += <span class="string">' ie'</span> + <span class="built_in">document</span>.documentMode;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 针对IE11及非IE浏览器，</span></div><div class="line">        <span class="comment">// 因为IE11下document.documentMode为11，所以html标签上会加ie11样式类；</span></div><div class="line">        <span class="comment">// 而非IE浏览器的document.documentMode为undefined，所以html标签上会加ieundefined样式类。</span></div><div class="line">        <span class="keyword">if</span> (<span class="comment">/*@cc_on!@*/</span><span class="literal">true</span>) &#123;</div><div class="line">            <span class="built_in">document</span>.documentElement.className += <span class="string">' ie'</span> + <span class="built_in">document</span>.documentMode;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;![endif]--&gt;</span></div><div class="line">   </div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.ie10</span> <span class="selector-class">.testclass</span> &#123;</div><div class="line">        <span class="attribute">color</span>: red</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.ie11</span> <span class="selector-class">.testclass</span> &#123;</div><div class="line">        <span class="attribute">color</span>: blue</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.ieundefined</span>  <span class="selector-class">.testclass</span> &#123;</div><div class="line">        <span class="attribute">color</span>: green</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>document.documentMode可以查看IEdocumentMode属性（IE8+新增）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS-Hack&quot;&gt;&lt;a href=&quot;#CSS-Hack&quot; class=&quot;headerlink&quot; title=&quot;CSS Hack&quot;&gt;&lt;/a&gt;CSS Hack&lt;/h1&gt;&lt;p&gt;这段几天稍微看了一下css hack，就做了个笔记总结一下，主要针对IE6~IE11。但对于hack，我自己不太推荐使用。&lt;/p&gt;
&lt;h2 id=&quot;条件注释法&quot;&gt;&lt;a href=&quot;#条件注释法&quot; class=&quot;headerlink&quot; title=&quot;条件注释法&quot;&gt;&lt;/a&gt;条件注释法&lt;/h2&gt;&lt;p&gt;IE浏览器专有的Hack方式:&lt;br&gt;&lt;code&gt;&amp;lt;!--[if IE]&amp;gt; 只在IE下生效 &amp;lt;![endif]--&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;!--[if IE 8]&amp;gt; 只在IE8下生效 &amp;lt;![endif]--&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;!--[if gte IE 8]&amp;gt; 只在IE8以上(包括IE8)版本IE浏览器显示生效 &amp;lt;![endif]--&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;!--[if lt IE 8]&amp;gt; 只在IE8以下(包括IE8)版本IE浏览器显示生效 &amp;lt;![endif]--&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;!--[if !IE 8]&amp;gt; 只在IE8上不生效 &amp;lt;![endif]--&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;!--[if !IE]&amp;gt;&amp;lt;!--&amp;gt; 非IE浏览器生效 &amp;lt;!--&amp;lt;![endif]--&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但当IE的版本到到达10/11后，开始不支持这种条件性注释&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Swiper</title>
    <link href="http://yoursite.com/2016/12/01/swiper/"/>
    <id>http://yoursite.com/2016/12/01/swiper/</id>
    <published>2016-12-01T02:29:11.000Z</published>
    <updated>2017-06-30T08:19:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在一个项目中使用了<code>Swiper</code>这个插件，就来分享一下。<br>网上还有中文的学习文档，所以学习起来也十分的方便，大家可以去官网看看<a target="_blank" href="http://www.swiper.com.cn/">Swiper中文网</a><br><a id="more"></a><br><b> Swiper 介绍 </b><br>Swiper 是一款免费以及轻量级的移动设备触控滑块的js框架，使用硬件加速过渡（如果该设备支持的话）。主要使用于移动端的网站、移动web apps，native apps和hybrid apps。主要是为IOS而设计的，同时，在Android、WP8系统也有着良好的用户体验，Swiper从3.0开始不再全面支持PC端。因此，如需在PC上兼容更多的浏览器，可以选择Swiper2.x（甚至支持IE7）。</p>
<p><b>Swiper常用于移动端网站的内容触摸滑动</b><br>Swiper是纯javascript打造的滑动特效插件，面向手机、平板电脑等移动终端。<br>Swiper能实现触屏焦点图、触屏Tab切换、触屏多图切换等常用效果。<br>Swiper开源、免费、稳定、使用简单、功能强大，是架构移动终端网站的重要选择！</p>
<p><b> 版本区别 </b><br>swiper.3.x 版本其主要适用的对象是移动端。所以对PC端的浏览器兼容并不友好。<br>swiper.2.x 对PC端浏览器的兼容性比较好，甚至支持IE7。<a href="http://2.swiper.com.cn/" target="_blank">swiper2文档</a><br>(由于项目不仅需要支持移动端的轮播，还要在<code>IE7+</code>正常显示，所以我选择了swiper.2.x)</p>
<p><b> 结合css3动画效果 </b><br>swiper可以配合你喜欢的动画效果，可以实现惊人的效果。在这里附上Swiper animate的使用方法：<br><a href="http://www.swiper.com.cn/usage/animate/index.html" target="_blank">Swiper Animate</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在一个项目中使用了&lt;code&gt;Swiper&lt;/code&gt;这个插件，就来分享一下。&lt;br&gt;网上还有中文的学习文档，所以学习起来也十分的方便，大家可以去官网看看&lt;a target=&#39;_blank&#39; href=&#39;http://www.swiper.com.cn/&#39;&gt;Swiper中文网&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="swiper" scheme="http://yoursite.com/tags/swiper/"/>
    
  </entry>
  
  <entry>
    <title>mac-xcrun-error</title>
    <link href="http://yoursite.com/2016/10/18/mac-xcrun-error/"/>
    <id>http://yoursite.com/2016/10/18/mac-xcrun-error/</id>
    <published>2016-10-18T06:00:50.000Z</published>
    <updated>2017-06-30T08:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mac升级系统后执行git命令，出现如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools),</div><div class="line">missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun</div></pre></td></tr></table></figure></p>
<a id="more"></a> 
<p>解决方法：<br>在终端执行命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcode-select --install</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac升级系统后执行git命令，出现如下错误：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="mac" scheme="http://yoursite.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客部署在GitHub上</title>
    <link href="http://yoursite.com/2016/10/01/hexo-github/"/>
    <id>http://yoursite.com/2016/10/01/hexo-github/</id>
    <published>2016-10-01T04:50:02.000Z</published>
    <updated>2017-06-30T08:39:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在GitHub上的操作"><a href="#在GitHub上的操作" class="headerlink" title="在GitHub上的操作"></a>在GitHub上的操作</h2><h3 id="新建一个Repository"><a href="#新建一个Repository" class="headerlink" title="新建一个Repository"></a>新建一个Repository</h3><p>在 Repository name 下填写 yourname.github.io<br>我的GitHub账号是LionHL，那么我的Repository name就是 LionHL.github.io<br><img src="/./images/img01.png" width="600" height="500" style="border: 1px solid #ccc;margin: 10px 0;"></p>
<h2 id="在笔记本上操作"><a href="#在笔记本上操作" class="headerlink" title="在笔记本上操作"></a>在笔记本上操作</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>使用npm命令安装即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<a id="more"></a> 
<h3 id="创建-Hexo-文件夹"><a href="#创建-Hexo-文件夹" class="headerlink" title="创建 Hexo 文件夹"></a>创建 Hexo 文件夹</h3><p>在你本地的Hexo文件夹下操作，安装Hexo。Hexo 即会自动在目标文件夹建立网站所需要的所有文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>
<h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
<h3 id="本地查看"><a href="#本地查看" class="headerlink" title="本地查看"></a>本地查看</h3><p>完成以上步骤，你就可以查看本地的hexo了。执行 <code>hexo generate</code>  <code>hexo server</code> ，然后在浏览器中打开localhost:4000。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo server</div></pre></td></tr></table></figure>
<h3 id="为-Hexo-安装-Git-插件"><a href="#为-Hexo-安装-Git-插件" class="headerlink" title="为 Hexo 安装 Git 插件"></a>为 Hexo 安装 Git 插件</h3><p>安装 <code>hexo-deployer-git</code> 。否则当你把本地的部署到github上时会报 <code>ERROR Deployer not found: git</code> 的错误，如图。</p>
<p><img src="/./images/img02.png" width="300" height="40" style="border: 1px solid #ccc;margin: 10px 0;"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git</div></pre></td></tr></table></figure></p>
<h3 id="修改你的-config-yml"><a href="#修改你的-config-yml" class="headerlink" title="修改你的 _config.yml"></a>修改你的 _config.yml</h3><p>找到根目录下的 _config.yml 文件，修改你的 _config.yml 如下：</p>
<p><img src="/./images/img03.png" width="500" height="200" style="border: 1px solid #ccc;margin: 10px 0;"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:LionHL/LionHL.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>注意这里选择的是 ssh 地址   </p>
<h3 id="生成静态文件并部署到-GitHub-上"><a href="#生成静态文件并部署到-GitHub-上" class="headerlink" title="生成静态文件并部署到 GitHub 上"></a>生成静态文件并部署到 GitHub 上</h3><p>执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>完成以上步骤，我们就搭建好自己的博客并部署到 GitHub 上了，我们可以在浏览器里打开 LionHL.github.io 查看自己的博客。第一次访问的时候可能访问不了，你可以过几分钟再进行访问。</p>
<h3 id="Hexo-常见操作命令"><a href="#Hexo-常见操作命令" class="headerlink" title="Hexo 常见操作命令"></a>Hexo 常见操作命令</h3><p>hexo new “postName” 新建文章<br>hexo new page “pageName” 新建页面<br>hexo generate 生成静态页面至public目录<br>hexo server 开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy 将.deploy目录部署到GitHub<br>hexo help   查看帮助<br>hexo version  查看Hexo的版本</p>
<h3 id="关于-themes"><a href="#关于-themes" class="headerlink" title="关于 themes"></a>关于 themes</h3><p>Hexo 提供了很多 theme 供你选择，在这我就不多做介绍了，自己可以去搜索。<br>我目前用的是 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank">hexo-theme-yilia</a><br>简单介绍一下我安装的步骤吧。<br>在本地的 hexo 文件夹下执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git@github.com:litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure>
<p>完成后你可以在本地themes下看见 yilia(自己定其他的名字) 主题包。然后在 _config.yml 文件里主题修改为 <code>theme: yilia</code></p>
<h4 id="修改头像"><a href="#修改头像" class="headerlink" title="修改头像"></a>修改头像</h4><p>打开 themes/yilia/_config.yml 文件，在 <code>#你的头像url  avatar:</code>后面添加一个url就行了。<br>（一些其他的设置也在这个文件里面修改，具体的可以自己查看）<br>在执行部署提交 <code>hexo g</code> <code>hexo d</code></p>
<p><br><br></p>
<h2 id="关于管理"><a href="#关于管理" class="headerlink" title="关于管理"></a>关于管理</h2><p>在完成以上步骤后，就完成了Hexo博客部署在GitHub上的操作了，这时会发现一个问题，如果我们更换了电脑，怎么更新管理博客呢？难道要将以上的所有步骤在新的电脑上再执行一遍？<br>不用这么麻烦，其实，Hexo生成的文件里面有.gitignore，它的本意应该也是放在GitHub上的。<br>所以我们可以考虑使用分支，创建一个分支hexo，来存放blog的原始文件。</p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>1、新建一个Repository， LionHL.github.io<br>2、创建两个分支，master和hexo，并将hexo设置为默认分支（因为我们要管理这个Hexo网站文件）<br>3、克隆仓库 git clone git@github.com:LionHL/LionHL.github.io.git<br>4、在本地文件夹下执行安装Hexo操作（如上在笔记本上操作，在这里我就不重复了，这个时候当前显示的分支应该是hexo）<br>5、修改生成的.gitignore文件，并上传github。（使用git add . ,git commit -m ‘…’, git push origin hexo 等操作）<br>6、生成静态文件并部署到 GitHub 上（hexo g, hexo d）</p>
<p>这样我们就算资料丢失或者更换电脑也不用害怕了，直接克隆仓库就可以了。<br>注意，在本地拷贝LionHL.github.io.git之后，执行安装Hexo操作时不需要<code>hexo init</code>这个命令了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在GitHub上的操作&quot;&gt;&lt;a href=&quot;#在GitHub上的操作&quot; class=&quot;headerlink&quot; title=&quot;在GitHub上的操作&quot;&gt;&lt;/a&gt;在GitHub上的操作&lt;/h2&gt;&lt;h3 id=&quot;新建一个Repository&quot;&gt;&lt;a href=&quot;#新建一个Repository&quot; class=&quot;headerlink&quot; title=&quot;新建一个Repository&quot;&gt;&lt;/a&gt;新建一个Repository&lt;/h3&gt;&lt;p&gt;在 Repository name 下填写 yourname.github.io&lt;br&gt;我的GitHub账号是LionHL，那么我的Repository name就是 LionHL.github.io&lt;br&gt;&lt;img src=&#39;/./images/img01.png&#39; width=&#39;600&#39; height=&#39;500&#39; style=&#39;border: 1px solid #ccc;margin: 10px 0;&#39;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;在笔记本上操作&quot;&gt;&lt;a href=&quot;#在笔记本上操作&quot; class=&quot;headerlink&quot; title=&quot;在笔记本上操作&quot;&gt;&lt;/a&gt;在笔记本上操作&lt;/h2&gt;&lt;h3 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h3&gt;&lt;p&gt;使用npm命令安装即可&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install -g hexo-cli&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
</feed>
